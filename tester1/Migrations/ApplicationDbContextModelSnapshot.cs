// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using tester1.Data;

namespace tester1.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("tester1.Models.AccountType", b =>
                {
                    b.Property<int>("AccountTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dscription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountTypeId");

                    b.ToTable("AccountTypes");
                });

            modelBuilder.Entity("tester1.Models.Assesment", b =>
                {
                    b.Property<string>("AssesmentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ActivityLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CategoryByUserId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CheifComplaint")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CigarettesPerDay")
                        .HasColumnType("int");

                    b.Property<string>("Conclusion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("CtScan")
                        .HasColumnType("bit");

                    b.Property<string>("CtScanUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Diseases")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("ExperiencedAnyLoss")
                        .HasColumnType("bit");

                    b.Property<string>("FunctionalImpact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InjuriesId")
                        .HasColumnType("int");

                    b.Property<int?>("ListOfMedicationsId")
                        .HasColumnType("int");

                    b.Property<int?>("MaxPainScaleId")
                        .HasColumnType("int");

                    b.Property<string>("Medication")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Mri")
                        .HasColumnType("bit");

                    b.Property<string>("Mriurl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PathologiesByTherapistPathologyId")
                        .HasColumnType("int");

                    b.Property<int?>("PathologyId")
                        .HasColumnType("int");

                    b.Property<int?>("PatientGoalId")
                        .HasColumnType("int");

                    b.Property<string>("PatientGoalInput")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreviousTreatment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("PsychologicalProblems")
                        .HasColumnType("bit");

                    b.Property<string>("PsychologicalProblemsDescrption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuinematicUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Report")
                        .HasColumnType("bit");

                    b.Property<string>("ReportUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ScaleId")
                        .HasColumnType("int");

                    b.Property<int?>("ScaleId1")
                        .HasColumnType("int");

                    b.Property<int?>("ScaleOfDiscomfortId")
                        .HasColumnType("int");

                    b.Property<int?>("SleepingPositionId")
                        .HasColumnType("int");

                    b.Property<int?>("SleepingQualityId")
                        .HasColumnType("int");

                    b.Property<int?>("SleepingQuantityId")
                        .HasColumnType("int");

                    b.Property<bool?>("Smokes")
                        .HasColumnType("bit");

                    b.Property<int?>("SubCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("SurgeriesId")
                        .HasColumnType("int");

                    b.Property<string>("SymptomsOfCovid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("TestedCovidPositive")
                        .HasColumnType("bit");

                    b.Property<string>("TherapistId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TypeOfPainId")
                        .HasColumnType("int");

                    b.Property<int?>("TypeOfResponderId")
                        .HasColumnType("int");

                    b.Property<int?>("WaterIntakeRecordId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("WhenTheProbStart")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Xray")
                        .HasColumnType("bit");

                    b.Property<string>("XrayUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AssesmentId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ApplicationUserId1");

                    b.HasIndex("CategoryByUserId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("InjuriesId");

                    b.HasIndex("ListOfMedicationsId");

                    b.HasIndex("PathologiesByTherapistPathologyId");

                    b.HasIndex("PatientGoalId");

                    b.HasIndex("ScaleId");

                    b.HasIndex("ScaleId1");

                    b.HasIndex("SleepingPositionId");

                    b.HasIndex("SleepingQualityId");

                    b.HasIndex("SleepingQuantityId");

                    b.HasIndex("SubCategoryId");

                    b.HasIndex("SurgeriesId");

                    b.HasIndex("TypeOfPainId");

                    b.HasIndex("TypeOfResponderId");

                    b.HasIndex("WaterIntakeRecordId");

                    b.ToTable("Assesments");
                });

            modelBuilder.Entity("tester1.Models.CategoriesByUser", b =>
                {
                    b.Property<int>("CategoryByUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryByUserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryByUserId");

                    b.ToTable("CategoriesByUsers");
                });

            modelBuilder.Entity("tester1.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("tester1.Models.Exercise", b =>
                {
                    b.Property<int>("ExerciseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ExerciseDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExerciseTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan?>("Time")
                        .HasColumnType("time");

                    b.Property<string>("VideoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExerciseId");

                    b.ToTable("Exercices");
                });

            modelBuilder.Entity("tester1.Models.ExercisesCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ExercisesCategories");
                });

            modelBuilder.Entity("tester1.Models.Injury", b =>
                {
                    b.Property<int>("InjuriesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("InjuryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InjuryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InjuryTreatment")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InjuriesId");

                    b.ToTable("Injuries");
                });

            modelBuilder.Entity("tester1.Models.ListOfMedication", b =>
                {
                    b.Property<int>("MedicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MedicationName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MedicationId");

                    b.ToTable("ListOfMedications");
                });

            modelBuilder.Entity("tester1.Models.Meeting", b =>
                {
                    b.Property<int>("MeetingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ConfirmationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("MeetingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MeetingDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MeetingTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TherapistId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MeetingId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ApplicationUserId1");

                    b.ToTable("Meetings");
                });

            modelBuilder.Entity("tester1.Models.PathologiesByTherapist", b =>
                {
                    b.Property<int>("PathologyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PathologyCase")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PathologyId");

                    b.ToTable("PathologiesbyTherapists");
                });

            modelBuilder.Entity("tester1.Models.PatientGoal", b =>
                {
                    b.Property<int>("PatientGoalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PatientGoalName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatientGoalId");

                    b.ToTable("PatientGoals");
                });

            modelBuilder.Entity("tester1.Models.PatientProgram", b =>
                {
                    b.Property<int>("PatientProgramId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ApplicationUserId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EffortNeeded")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InjuryTypeId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsSeen")
                        .HasColumnType("bit");

                    b.Property<int?>("NumberOfSessions")
                        .HasColumnType("int");

                    b.Property<string>("PatientId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ProgramEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ProgramStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("TherapistId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatientProgramId");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ApplicationUserId1");

                    b.HasIndex("InjuryTypeId");

                    b.ToTable("PatientPrograms");
                });

            modelBuilder.Entity("tester1.Models.PatientProgramsExercise", b =>
                {
                    b.Property<int>("PatientProgramsExercisesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("time");

                    b.Property<int?>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<int?>("PatientProgramId")
                        .HasColumnType("int");

                    b.Property<int?>("Repetition")
                        .HasColumnType("int");

                    b.HasKey("PatientProgramsExercisesId");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("PatientProgramId");

                    b.ToTable("PatientProgramsExercises");
                });

            modelBuilder.Entity("tester1.Models.PatientsMoodScale", b =>
                {
                    b.Property<int>("PatientMoodScaleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MoodScaleId")
                        .HasColumnType("int");

                    b.Property<string>("PatientId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PatientMoodScaleId");

                    b.HasIndex("MoodScaleId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientsMoodScales");
                });

            modelBuilder.Entity("tester1.Models.PatientsPainScale", b =>
                {
                    b.Property<int>("PatientPainScaleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PainScaleId")
                        .HasColumnType("int");

                    b.Property<string>("PatientId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PatientPainScaleId");

                    b.HasIndex("PainScaleId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientsPainScales");
                });

            modelBuilder.Entity("tester1.Models.Scale", b =>
                {
                    b.Property<int>("ScaleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ScaleRate")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ScaleId");

                    b.ToTable("Scales");
                });

            modelBuilder.Entity("tester1.Models.SleepingPosition", b =>
                {
                    b.Property<int>("SleepingPositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SleepingPositionName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SleepingPositionId");

                    b.ToTable("SleepingPositions");
                });

            modelBuilder.Entity("tester1.Models.SleepingQuality", b =>
                {
                    b.Property<int>("SleepingQualityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SleepingQualityName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SleepingQualityId");

                    b.ToTable("SleepingQualities");
                });

            modelBuilder.Entity("tester1.Models.SleepingQuantity", b =>
                {
                    b.Property<int>("SleepingQuantityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SleepingQuantityName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SleepingQuantityId");

                    b.ToTable("SleepingQantities");
                });

            modelBuilder.Entity("tester1.Models.SubCategory", b =>
                {
                    b.Property<int>("SubCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("SubCategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubCategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubCategories");
                });

            modelBuilder.Entity("tester1.Models.Surgery", b =>
                {
                    b.Property<int>("SurgeryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("SurgeryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SurgeryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurgeryTreatment")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SurgeryId");

                    b.ToTable("Surgeries");
                });

            modelBuilder.Entity("tester1.Models.Tip", b =>
                {
                    b.Property<int>("TipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("TipCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("TipDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TipVideoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TipsImagesId")
                        .HasColumnType("int");

                    b.HasKey("TipId");

                    b.HasIndex("TipCategoryId");

                    b.ToTable("Tips");
                });

            modelBuilder.Entity("tester1.Models.TipsCategory", b =>
                {
                    b.Property<int>("TipCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TipCategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TipCategoryId");

                    b.ToTable("TipsCategories");
                });

            modelBuilder.Entity("tester1.Models.TipsImage", b =>
                {
                    b.Property<int>("TipImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("TipId")
                        .HasColumnType("int");

                    b.Property<string>("TipImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TipImageId");

                    b.HasIndex("TipId");

                    b.ToTable("TipsImages");
                });

            modelBuilder.Entity("tester1.Models.TypesOfPain", b =>
                {
                    b.Property<int>("TypeOfPainId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TypeOfPainName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypeOfPainId");

                    b.ToTable("TypesOfPains");
                });

            modelBuilder.Entity("tester1.Models.TypesOfResponder", b =>
                {
                    b.Property<int>("TypeOfResponderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TypeOfResponderName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypeOfResponderId");

                    b.ToTable("TypesOfResponders");
                });

            modelBuilder.Entity("tester1.Models.WaterIntake", b =>
                {
                    b.Property<int>("WaterIntakeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("WaterIntakeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WaterIntakeId");

                    b.ToTable("WaterIntakes");
                });

            modelBuilder.Entity("tester1.Models.WaterIntakeRecord", b =>
                {
                    b.Property<int>("WaterIntakeRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("NullEvery24Hour")
                        .HasColumnType("datetime2");

                    b.Property<string>("PatientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("WaterIntakeId")
                        .HasColumnType("int");

                    b.HasKey("WaterIntakeRecordId");

                    b.HasIndex("PatientId");

                    b.HasIndex("WaterIntakeId");

                    b.ToTable("WaterIntakeRecords");
                });

            modelBuilder.Entity("tester1.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int?>("AccountTypeId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Bmi")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("DominantHand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Height")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("IsActivated")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumberOne")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumberTwo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasIndex("AccountTypeId");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("tester1.Models.Assesment", b =>
                {
                    b.HasOne("tester1.Models.ApplicationUser", null)
                        .WithMany("AssesmentPatients")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("tester1.Models.ApplicationUser", null)
                        .WithMany("AssesmentTherapists")
                        .HasForeignKey("ApplicationUserId1");

                    b.HasOne("tester1.Models.CategoriesByUser", "CategoryByUser")
                        .WithMany("Assesments")
                        .HasForeignKey("CategoryByUserId");

                    b.HasOne("tester1.Models.Category", "Category")
                        .WithMany("Assesments")
                        .HasForeignKey("CategoryId");

                    b.HasOne("tester1.Models.Injury", "Injuries")
                        .WithMany("Assesments")
                        .HasForeignKey("InjuriesId");

                    b.HasOne("tester1.Models.ListOfMedication", "ListOfMedications")
                        .WithMany("Assesments")
                        .HasForeignKey("ListOfMedicationsId");

                    b.HasOne("tester1.Models.PathologiesByTherapist", null)
                        .WithMany("Assesments")
                        .HasForeignKey("PathologiesByTherapistPathologyId");

                    b.HasOne("tester1.Models.PatientGoal", "PatientGoal")
                        .WithMany("Assesments")
                        .HasForeignKey("PatientGoalId");

                    b.HasOne("tester1.Models.Scale", null)
                        .WithMany("AssesmentMaxPainScales")
                        .HasForeignKey("ScaleId");

                    b.HasOne("tester1.Models.Scale", null)
                        .WithMany("AssesmentScaleOfDiscomforts")
                        .HasForeignKey("ScaleId1");

                    b.HasOne("tester1.Models.SleepingPosition", "SleepingPosition")
                        .WithMany("Assesments")
                        .HasForeignKey("SleepingPositionId");

                    b.HasOne("tester1.Models.SleepingQuality", "SleepingQuality")
                        .WithMany("Assesments")
                        .HasForeignKey("SleepingQualityId");

                    b.HasOne("tester1.Models.SleepingQuantity", "SleepingQuantity")
                        .WithMany("Assesments")
                        .HasForeignKey("SleepingQuantityId");

                    b.HasOne("tester1.Models.SubCategory", "SubCategory")
                        .WithMany("Assesments")
                        .HasForeignKey("SubCategoryId");

                    b.HasOne("tester1.Models.Surgery", "Surgeries")
                        .WithMany("Assesments")
                        .HasForeignKey("SurgeriesId");

                    b.HasOne("tester1.Models.TypesOfPain", "TypeOfPain")
                        .WithMany("Assesments")
                        .HasForeignKey("TypeOfPainId");

                    b.HasOne("tester1.Models.TypesOfResponder", "TypeOfResponder")
                        .WithMany("Assesments")
                        .HasForeignKey("TypeOfResponderId");

                    b.HasOne("tester1.Models.WaterIntakeRecord", "WaterIntakeRecord")
                        .WithMany("Assesments")
                        .HasForeignKey("WaterIntakeRecordId");

                    b.Navigation("Category");

                    b.Navigation("CategoryByUser");

                    b.Navigation("Injuries");

                    b.Navigation("ListOfMedications");

                    b.Navigation("PatientGoal");

                    b.Navigation("SleepingPosition");

                    b.Navigation("SleepingQuality");

                    b.Navigation("SleepingQuantity");

                    b.Navigation("SubCategory");

                    b.Navigation("Surgeries");

                    b.Navigation("TypeOfPain");

                    b.Navigation("TypeOfResponder");

                    b.Navigation("WaterIntakeRecord");
                });

            modelBuilder.Entity("tester1.Models.Meeting", b =>
                {
                    b.HasOne("tester1.Models.ApplicationUser", null)
                        .WithMany("MeetingPatients")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("tester1.Models.ApplicationUser", null)
                        .WithMany("MeetingTherapists")
                        .HasForeignKey("ApplicationUserId1");
                });

            modelBuilder.Entity("tester1.Models.PatientProgram", b =>
                {
                    b.HasOne("tester1.Models.ApplicationUser", null)
                        .WithMany("PatientProgramPatients")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("tester1.Models.ApplicationUser", null)
                        .WithMany("PatientProgramTherapists")
                        .HasForeignKey("ApplicationUserId1");

                    b.HasOne("tester1.Models.SubCategory", "InjuryType")
                        .WithMany("PatientPrograms")
                        .HasForeignKey("InjuryTypeId");

                    b.Navigation("InjuryType");
                });

            modelBuilder.Entity("tester1.Models.PatientProgramsExercise", b =>
                {
                    b.HasOne("tester1.Models.Exercise", "Exercise")
                        .WithMany("PatientProgramsExercises")
                        .HasForeignKey("ExerciseId");

                    b.HasOne("tester1.Models.PatientProgram", "PatientProgram")
                        .WithMany("PatientProgramsExercises")
                        .HasForeignKey("PatientProgramId");

                    b.Navigation("Exercise");

                    b.Navigation("PatientProgram");
                });

            modelBuilder.Entity("tester1.Models.PatientsMoodScale", b =>
                {
                    b.HasOne("tester1.Models.Scale", "MoodScale")
                        .WithMany("PatientsMoodScales")
                        .HasForeignKey("MoodScaleId");

                    b.HasOne("tester1.Models.ApplicationUser", "Patient")
                        .WithMany("PatientsMoodScales")
                        .HasForeignKey("PatientId");

                    b.Navigation("MoodScale");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("tester1.Models.PatientsPainScale", b =>
                {
                    b.HasOne("tester1.Models.Scale", "PainScale")
                        .WithMany("PatientsPainScales")
                        .HasForeignKey("PainScaleId");

                    b.HasOne("tester1.Models.ApplicationUser", "Patient")
                        .WithMany("PatientsPainScales")
                        .HasForeignKey("PatientId");

                    b.Navigation("PainScale");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("tester1.Models.SubCategory", b =>
                {
                    b.HasOne("tester1.Models.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("tester1.Models.Tip", b =>
                {
                    b.HasOne("tester1.Models.TipsCategory", "TipCategory")
                        .WithMany("Tips")
                        .HasForeignKey("TipCategoryId");

                    b.Navigation("TipCategory");
                });

            modelBuilder.Entity("tester1.Models.TipsImage", b =>
                {
                    b.HasOne("tester1.Models.Tip", "Tip")
                        .WithMany("TipsImages")
                        .HasForeignKey("TipId");

                    b.Navigation("Tip");
                });

            modelBuilder.Entity("tester1.Models.WaterIntakeRecord", b =>
                {
                    b.HasOne("tester1.Models.ApplicationUser", "Patient")
                        .WithMany("WaterIntakeRecords")
                        .HasForeignKey("PatientId");

                    b.HasOne("tester1.Models.WaterIntake", "WaterIntake")
                        .WithMany("WaterIntakeRecords")
                        .HasForeignKey("WaterIntakeId");

                    b.Navigation("Patient");

                    b.Navigation("WaterIntake");
                });

            modelBuilder.Entity("tester1.Models.ApplicationUser", b =>
                {
                    b.HasOne("tester1.Models.AccountType", "AccountType")
                        .WithMany("Users")
                        .HasForeignKey("AccountTypeId");

                    b.Navigation("AccountType");
                });

            modelBuilder.Entity("tester1.Models.AccountType", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("tester1.Models.CategoriesByUser", b =>
                {
                    b.Navigation("Assesments");
                });

            modelBuilder.Entity("tester1.Models.Category", b =>
                {
                    b.Navigation("Assesments");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("tester1.Models.Exercise", b =>
                {
                    b.Navigation("PatientProgramsExercises");
                });

            modelBuilder.Entity("tester1.Models.Injury", b =>
                {
                    b.Navigation("Assesments");
                });

            modelBuilder.Entity("tester1.Models.ListOfMedication", b =>
                {
                    b.Navigation("Assesments");
                });

            modelBuilder.Entity("tester1.Models.PathologiesByTherapist", b =>
                {
                    b.Navigation("Assesments");
                });

            modelBuilder.Entity("tester1.Models.PatientGoal", b =>
                {
                    b.Navigation("Assesments");
                });

            modelBuilder.Entity("tester1.Models.PatientProgram", b =>
                {
                    b.Navigation("PatientProgramsExercises");
                });

            modelBuilder.Entity("tester1.Models.Scale", b =>
                {
                    b.Navigation("AssesmentMaxPainScales");

                    b.Navigation("AssesmentScaleOfDiscomforts");

                    b.Navigation("PatientsMoodScales");

                    b.Navigation("PatientsPainScales");
                });

            modelBuilder.Entity("tester1.Models.SleepingPosition", b =>
                {
                    b.Navigation("Assesments");
                });

            modelBuilder.Entity("tester1.Models.SleepingQuality", b =>
                {
                    b.Navigation("Assesments");
                });

            modelBuilder.Entity("tester1.Models.SleepingQuantity", b =>
                {
                    b.Navigation("Assesments");
                });

            modelBuilder.Entity("tester1.Models.SubCategory", b =>
                {
                    b.Navigation("Assesments");

                    b.Navigation("PatientPrograms");
                });

            modelBuilder.Entity("tester1.Models.Surgery", b =>
                {
                    b.Navigation("Assesments");
                });

            modelBuilder.Entity("tester1.Models.Tip", b =>
                {
                    b.Navigation("TipsImages");
                });

            modelBuilder.Entity("tester1.Models.TipsCategory", b =>
                {
                    b.Navigation("Tips");
                });

            modelBuilder.Entity("tester1.Models.TypesOfPain", b =>
                {
                    b.Navigation("Assesments");
                });

            modelBuilder.Entity("tester1.Models.TypesOfResponder", b =>
                {
                    b.Navigation("Assesments");
                });

            modelBuilder.Entity("tester1.Models.WaterIntake", b =>
                {
                    b.Navigation("WaterIntakeRecords");
                });

            modelBuilder.Entity("tester1.Models.WaterIntakeRecord", b =>
                {
                    b.Navigation("Assesments");
                });

            modelBuilder.Entity("tester1.Models.ApplicationUser", b =>
                {
                    b.Navigation("AssesmentPatients");

                    b.Navigation("AssesmentTherapists");

                    b.Navigation("MeetingPatients");

                    b.Navigation("MeetingTherapists");

                    b.Navigation("PatientProgramPatients");

                    b.Navigation("PatientProgramTherapists");

                    b.Navigation("PatientsMoodScales");

                    b.Navigation("PatientsPainScales");

                    b.Navigation("WaterIntakeRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
